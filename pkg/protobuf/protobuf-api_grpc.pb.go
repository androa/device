// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceAgentClient is the client API for DeviceAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceAgentClient interface {
	Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error)
	Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error)
	WatchGateways(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DeviceAgent_WatchGatewaysClient, error)
	GatewayClicked(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Error, error)
}

type deviceAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceAgentClient(cc grpc.ClientConnInterface) DeviceAgentClient {
	return &deviceAgentClient{cc}
}

func (c *deviceAgentClient) Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceAgent/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAgentClient) Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceAgent/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceAgentClient) WatchGateways(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DeviceAgent_WatchGatewaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceAgent_ServiceDesc.Streams[0], "/protobuf.DeviceAgent/WatchGateways", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceAgentWatchGatewaysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceAgent_WatchGatewaysClient interface {
	Recv() (*Gateway, error)
	grpc.ClientStream
}

type deviceAgentWatchGatewaysClient struct {
	grpc.ClientStream
}

func (x *deviceAgentWatchGatewaysClient) Recv() (*Gateway, error) {
	m := new(Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceAgentClient) GatewayClicked(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceAgent/GatewayClicked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceAgentServer is the server API for DeviceAgent service.
// All implementations must embed UnimplementedDeviceAgentServer
// for forward compatibility
type DeviceAgentServer interface {
	Connect(context.Context, *Empty) (*Error, error)
	Disconnect(context.Context, *Empty) (*Error, error)
	WatchGateways(*Empty, DeviceAgent_WatchGatewaysServer) error
	GatewayClicked(context.Context, *Gateway) (*Error, error)
	mustEmbedUnimplementedDeviceAgentServer()
}

// UnimplementedDeviceAgentServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceAgentServer struct {
}

func (UnimplementedDeviceAgentServer) Connect(context.Context, *Empty) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDeviceAgentServer) Disconnect(context.Context, *Empty) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedDeviceAgentServer) WatchGateways(*Empty, DeviceAgent_WatchGatewaysServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchGateways not implemented")
}
func (UnimplementedDeviceAgentServer) GatewayClicked(context.Context, *Gateway) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayClicked not implemented")
}
func (UnimplementedDeviceAgentServer) mustEmbedUnimplementedDeviceAgentServer() {}

// UnsafeDeviceAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceAgentServer will
// result in compilation errors.
type UnsafeDeviceAgentServer interface {
	mustEmbedUnimplementedDeviceAgentServer()
}

func RegisterDeviceAgentServer(s grpc.ServiceRegistrar, srv DeviceAgentServer) {
	s.RegisterService(&DeviceAgent_ServiceDesc, srv)
}

func _DeviceAgent_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAgentServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceAgent/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAgentServer).Connect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAgent_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAgentServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceAgent/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAgentServer).Disconnect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceAgent_WatchGateways_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceAgentServer).WatchGateways(m, &deviceAgentWatchGatewaysServer{stream})
}

type DeviceAgent_WatchGatewaysServer interface {
	Send(*Gateway) error
	grpc.ServerStream
}

type deviceAgentWatchGatewaysServer struct {
	grpc.ServerStream
}

func (x *deviceAgentWatchGatewaysServer) Send(m *Gateway) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceAgent_GatewayClicked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceAgentServer).GatewayClicked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceAgent/GatewayClicked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceAgentServer).GatewayClicked(ctx, req.(*Gateway))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceAgent_ServiceDesc is the grpc.ServiceDesc for DeviceAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.DeviceAgent",
	HandlerType: (*DeviceAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _DeviceAgent_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _DeviceAgent_Disconnect_Handler,
		},
		{
			MethodName: "GatewayClicked",
			Handler:    _DeviceAgent_GatewayClicked_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchGateways",
			Handler:       _DeviceAgent_WatchGateways_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf-api.proto",
}
