// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// APIServerClient is an autogenerated mock type for the APIServerClient type
type APIServerClient struct {
	mock.Mock
}

// GetDeviceConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *APIServerClient) GetDeviceConfiguration(ctx context.Context, in *pb.GetDeviceConfigurationRequest, opts ...grpc.CallOption) (pb.APIServer_GetDeviceConfigurationClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.APIServer_GetDeviceConfigurationClient
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetDeviceConfigurationRequest, ...grpc.CallOption) pb.APIServer_GetDeviceConfigurationClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.APIServer_GetDeviceConfigurationClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetDeviceConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *APIServerClient) GetGatewayConfiguration(ctx context.Context, in *pb.GetGatewayConfigurationRequest, opts ...grpc.CallOption) (pb.APIServer_GetGatewayConfigurationClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.APIServer_GetGatewayConfigurationClient
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetGatewayConfigurationRequest, ...grpc.CallOption) pb.APIServer_GetGatewayConfigurationClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.APIServer_GetGatewayConfigurationClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetGatewayConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *APIServerClient) Login(ctx context.Context, in *pb.APIServerLoginRequest, opts ...grpc.CallOption) (*pb.APIServerLoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.APIServerLoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.APIServerLoginRequest, ...grpc.CallOption) *pb.APIServerLoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.APIServerLoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.APIServerLoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
