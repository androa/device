name: Test, build and release
on:
  push:
    paths:
      - 'Makefile'
      - 'go.mod'
      - '**.go'
      - 'device-health-checker/**/*.php'
      - 'device-health-checker/composer.json'
      - 'device-health-checker/composer.lock'
      - '.github/workflows/master.yml'
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: run tests
      run: |
        sudo apt update
        sudo apt install --yes build-essential libgtk-3-dev libappindicator3-dev
        make run-integration-test

  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: set version
        id: set-version
        run: echo ::set-output name=version::$(date "+%Y-%m-%d")-$(git --no-pager log -1 --pretty=%h)

 #test-device-health-checker:
 #  runs-on: ubuntu-latest
 #  defaults:
 #    run:
 #      working-directory: ./device-health-checker
 #  steps:
 #    - uses: actions/checkout@v2
 #    - name: Setup PHP
 #      uses: shivammathur/setup-php@v2
 #      with:
 #        php-version: '7.4'
 #    - name: Output some debug information about the PHP version
 #      run: |
 #        php -v
 #        php -i
 #        php -m
 #    - name: Validate composer files
 #      run: composer validate --strict
 #    - name: Cache Composer packages
 #      id: composer-cache
 #      uses: actions/cache@v1
 #      with:
 #        path: vendor
 #        key: ${{ runner.os }}-php-node-${{ hashFiles('**/composer.lock') }}
 #        restore-keys: |
 #          ${{ runner.os }}-php-node-
 #    - name: Install dependencies
 #      if: steps.composer-cache.outputs.cache-hit != 'true'
 #      run: composer install --prefer-dist --no-progress --no-suggest --no-ansi -o
 #    - name: Run tests
 #      run: composer run ci

  build:
    needs:
      - set-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-client, windows-client, controlplane]
    steps:
      - uses: actions/checkout@v2
      - name: build ${{ matrix.target }}
        run: |
          make ${{ matrix.target }} VERSION=${{ needs.set-version.outputs.version }}

      - name: upload ${{ matrix.target }}
        uses: actions/upload-artifact@v2.0.1
        with:
          name: ${{ matrix.target }}
          path: bin/${{ matrix.target }}

  # Also builds, should probably download artifact instead
  build-macos:
    needs:
      - set-version
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: build pkg
      run: |
        make pkg VERSION=${{ needs.set-version.outputs.version }}
    - name: upload pkg
      uses: actions/upload-artifact@v2.0.1
      with:
        name: pkg
        path: naisdevice-${{ needs.set-version.outputs.version }}.pkg

  build-windows:
    needs:
      - build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.1
      - name: download windows binaries
        uses: actions/download-artifact@v2.0
        with:
          name: windows-client
          path: bin/windows
      - name: create windows installer
        run: |
          msbuild windows\naisdevice.wixproj
      - name: upload windows installer
        uses: actions/upload-artifact@v2.0.1
        with:
          name: windows-installer
          path: bin/windows/naisdevice.msi

  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - set-version
      - test
      #- test-device-health-checker
      - build
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: create release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.set-version.outputs.version }}
          release_name: Release ${{ needs.set-version.outputs.version }}
          draft: false
          prerelease: false

      - name: download controlplane artifacts
        uses: actions/download-artifact@v2.0
        with:
          name: controlplane
          path: bin/controlplane
      - name: upload apiserver binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/apiserver
          asset_name: apiserver
          asset_content_type: application/octet-stream
      - name: upload gateway-agent binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/gateway-agent
          asset_name: gateway-agent
          asset_content_type: application/octet-stream
      - name: upload bootstrap-api binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/bootstrap-api
          asset_name: bootstrap-api
          asset_content_type: application/octet-stream
      - name: upload prometheus-agent binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/prometheus-agent
          asset_name: prometheus-agent
          asset_content_type: application/octet-stream

     #- name: download device-health-checker artifact
     #  uses: actions/download-artifact@v2.0
     #  with:
     #    name: device-health-checker
     #    path: bin/device-health-checker
     #- name: Prepare device-health-checker scripts for packaging
     #  working-directory: ./device-health-checker
     #  run: |
     #    composer install --prefer-dist --no-progress --no-suggest --no-ansi --no-dev -o
     #- name: upload device-health-checker.phar archive
     #  uses: actions/upload-release-asset@v1.0.2
     #  env:
     #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #  with:
     #    upload_url: ${{ steps.create_release.outputs.upload_url }}
     #    asset_path: ./device-health-checker/bin/device-health-checker.phar
     #    asset_name: device-health-checker.phar
     #    asset_content_type: application/octet-stream

      - name: download windows installer
        uses: actions/download-artifact@v2.0
        with:
          name: windows-installer
          path: bin/windows
      - name: upload naisdevice.msi
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/windows/naisdevice.msi
          asset_name: naisdevice.msi
          asset_content_type: application/octet-stream

      - name: download pkg
        uses: actions/download-artifact@v2.0
        with:
          name: pkg
      - name: upload macos pkg to release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./naisdevice-${{ needs.set-version.outputs.version }}.pkg
          asset_name: naisdevice.pkg
          asset_content_type: application/octet-stream
